package main

import (
	"fmt"
)

func main() {
	var num1 = 2
	var num2 = 3

	fmt.Println(num1 & num2) // num1 的补码 0000 0010，num2 的补码 0000 0011 => 0000 0010
	fmt.Println(num1 | num2) // num1 的补码 0000 0010，num2 的补码 0000 0011 => 0000 0011
	fmt.Println(num1 ^ num2) // num1 的补码 0000 0010，num2 的补码 0000 0011 => 0000 0001

	// -2 的原码是 1000 0010
	// -2 的反码是 1111 1101
	// -2 的补码 1111 1110，2 的补码 0000 0010 => 1111 1100
	// 得到的结果是补码，而且是负数，需要获取原码
	// 1111 1100 这个补码的反码需要减 1，结果是是 1111 1011，对应的原码是 1000 0100（-4）
	fmt.Println(-2 ^ 2) // -4

	// 右移运算符，低位溢出，符号位不变，并用符号位补溢出的高位
	fmt.Println(1 >> 2) // 0000 0001 => 0000 0000（0）
	// 左移运算符，符号位不变，低位补 0
	fmt.Println(1 << 2) // 0000 0001 => 0000 0100（4）

	// -1 的补码是 1111 1111
	// 得到的结果是 1111 1111
	// 对应的反码是 1111 1110
	// 对应的原码是 1000 0001（-1）
	fmt.Println(-1 >> 2) // -1
	// 左移运算符，符号位不变，低位补 0
	// -1 的补码是 1111 1111
	// 得到的结果是 1111 1100
	// 对应的反码是 1111 1011
	// 对应的原码是 1000 0100（-4）
	fmt.Println(-1 << 2) // -4
}
