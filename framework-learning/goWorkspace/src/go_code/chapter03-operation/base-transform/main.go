package main

import (
	"fmt"
)

func main() {
	// 二进制转十进制
	// 从最低位开始（右边），将每个位上的数提取出来，乘以 2 的（位数 -1）次方，然后求和

	// 八进制转十进制
	// 从最低位开始（右边），将每个位上的数提取出来，乘以 8 的（位数 -1）次方，然后求和
	var num1 int = 0123
	fmt.Println("num1 =", num1) // 1 * 8 * 8 + 2 * 8 + 3 * 1 83

	// 十六进制转十进制
	// 从最低位开始（右边），将每个位上的数提取出来，乘以 16 的（位数 -1）次方，然后求和
	var num2 int = 0x34A
	fmt.Println("num2 =", num2) // 3 * 16 * 16 + 4 * 16 + 10 842

	// 十进制转二进制
	// 将该数不断的除以 2，直到商为 0 为止，然后将每步的余数倒过来，就是对应的二进制
	var num3 int = 56
	fmt.Printf("num3 = %b\n", num3) // 111000

	// 十进制转八进制
	// 将该数不断的除以 8，直到商为 0 为止，然后将每步的余数倒过来，就是对应的二进制
	var num4 int = 156
	fmt.Printf("num4 = %o\n", num4) // 0234

	// 十进制转十六进制
	// 将该数不断的除以 16，直到商为 0 为止，然后将每步的余数倒过来，就是对应的二进制
	var num5 int = 840
	fmt.Printf("num5 = %x\n", num5) // 0x348

	// 二进制转八进制
	// 将二进制每三位一组（从低位开始组合），转成对应的八进制数即可

	// 二进制转十六进制
	// 将二进制每四位一组（从低位开始组合），转成对应的十六进制数即可

	// 八进制转二进制
	// 将八进制数每一位，转成对应的一个三位的二进制数即可
	var num6 int = 023
	fmt.Printf("num6 = %b\n", num6) // 10011

	// 十六进制转二进制
	// 将十六进制数每一位，转成对应的一个四位的二进制数即可
	var num7 int = 0x23
	fmt.Printf("num7 = %b\n", num7) // 100011

	// 八进制转十六进制
	// 将八进制数转成二进制，再转成十六进制
	var num8 int = 023
	fmt.Printf("num8 = %x\n", num8) // 0x13
}
